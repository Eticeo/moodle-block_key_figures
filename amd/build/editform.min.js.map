{"version":3,"file":"editform.min.js","sources":["../src/editform.js"],"sourcesContent":["/**\n * Function call in php\n *\n * @param {number} instid - id of block instance\n * @param {boolean} waitModal - true if we need to wait modal to call js. False if not (ex: load param is tab)\n */\nexport const init = (instid, waitModal) => {\n    // Lines to give window functions needed.\n    window.blockKeyFiguresManageLines = blockKeyFiguresManageLines;\n    window.blockKeyFiguresChangeLine = blockKeyFiguresChangeLine;\n\n    if (waitModal) {\n        // Call specific function.\n        blockKeyFiguresWaitModal(instid);\n    } else {\n        // Go on.\n        blockKeyFiguresOnOpen();\n    }\n};\n\n/**\n * Waits for the modal to be opened and then runs the init function\n *\n * @param {number} instid - id of block instance\n * @returns {Promise<boolean>} - true if the modal is opened, false if not\n */\nfunction blockKeyFiguresWaitModal(instid) {\n    // We need to wait specific element (which is in modal) to run init.\n    blockKeyFiguresWaitForElm(\"input[name='blockid'][value='\" + instid + \"']\").then(() => {\n        // Element is here, run init.\n        blockKeyFiguresOnOpen();\n        // And now wait modal closed to rerun the waitmodal.\n        blockKeyFiguresWaitDestroyModal(instid);\n\n        return true;\n\n    }).catch(error => {\n        console.error(error);\n        return false;\n    });\n}\n\n/**\n * Needed in case we open, close then reopen modal\n *\n * @param {number} instid - id of block instance\n * @returns {Promise<boolean>} - true if the modal is destroyed, false if not\n */\nfunction blockKeyFiguresWaitDestroyModal(instid) {\n    blockKeyFiguresWaitForNotElm(\"input[name='blockid'][value='\" + instid + \"']\").then(() => {\n        blockKeyFiguresOnOpen();\n        blockKeyFiguresWaitModal(instid);\n\n        return true;\n\n    }).catch(error => {\n        console.error(error);\n        return false;\n    });\n}\n\n/**\n * Function to run when the modal is opened\n */\nfunction blockKeyFiguresOnOpen() {\n    document.querySelectorAll('[id^=\"id_config_block_number\"]').forEach(function(element) {\n        blockKeyFiguresManageLines(element, 'id_configheader');\n\n        element.addEventListener('change', function() {\n            blockKeyFiguresManageLines(element, 'id_configheader');\n        });\n    });\n\n    document.querySelectorAll('[id^=\"id_config_line_number_\"]').forEach(function(element) {\n        blockKeyFiguresChangeLine(element);\n\n        element.addEventListener('change', function() {\n            blockKeyFiguresChangeLine(element);\n        });\n    });\n}\n\n/**\n * Function wait specific element are NOT here to continue\n *\n * @param {string} selector - the specific element selector\n * @returns {Promise}\n */\nfunction blockKeyFiguresWaitForNotElm(selector) {\n    return new Promise(resolve => {\n        if (!document.querySelector(selector)) {\n            return resolve(document.querySelector(selector));\n        }\n\n        const observer = new MutationObserver(() => {\n            if (!document.querySelector(selector)) {\n                resolve(document.querySelector(selector));\n                observer.disconnect();\n            }\n        });\n\n        observer.observe(document.body, {\n            childList: true,\n            subtree: true\n        });\n    });\n\n    return false;\n}\n\n/**\n * Function wait specific element are here to continue\n *\n * @param {string} selector - the specific element selector\n * @returns {Promise}\n */\nfunction blockKeyFiguresWaitForElm(selector) {\n    return new Promise(resolve => {\n        if (document.querySelector(selector)) {\n            return resolve(document.querySelector(selector));\n        }\n\n        const observer = new MutationObserver(() => {\n            if (document.querySelector(selector)) {\n                resolve(document.querySelector(selector));\n                observer.disconnect();\n            }\n        });\n\n        observer.observe(document.body, {\n            childList: true,\n            subtree: true\n        });\n    });\n\n    return false;\n}\n\n/**\n * Check the current number of block and hide the blocks settings that we don't need,\n * and show that we need\n *\n * @param {string} element - element to manage\n * @param {string} targetid - id of the lines to show/hide\n */\nfunction blockKeyFiguresManageLines(element, targetid) {\n    let blockNumber = parseInt(element.value);\n\n    document.querySelectorAll('[id^=\"' + targetid + '\"]').forEach(function(element) {\n        let match = element.id.match(new RegExp(targetid + \"(\\\\d+)_\"));\n        if (match) {\n            let num = parseInt(match[1]);\n            if (num > blockNumber) {\n                element.style.display = 'none';\n            } else {\n                element.style.display = '';\n            }\n        }\n    });\n}\n\n/**\n * Function to manage the lines of the block key figures\n *\n * @param {object} object - object\n */\nfunction blockKeyFiguresChangeLine(object) {\n    let blocknum = object.id;\n    blocknum = parseInt(blocknum.replace('id_config_line_number_', ''));\n\n    blockKeyFiguresManageLines(object, 'fitem_id_config_number_' + blocknum + '_');\n    blockKeyFiguresManageLines(object, 'fitem_id_config_number_caption_' + blocknum + '_');\n}\n"],"names":["blockKeyFiguresWaitModal","instid","selector","Promise","resolve","document","querySelector","observer","MutationObserver","disconnect","observe","body","childList","subtree","then","blockKeyFiguresOnOpen","blockKeyFiguresWaitForNotElm","catch","error","console","blockKeyFiguresWaitDestroyModal","querySelectorAll","forEach","element","blockKeyFiguresManageLines","addEventListener","blockKeyFiguresChangeLine","targetid","blockNumber","parseInt","value","match","id","RegExp","num","style","display","object","blocknum","replace","waitModal","window"],"mappings":"0JA0BSA,yBAAyBC,YA0FCC,UAAAA,SAxFL,gCAAkCD,OAAS,KAyF9D,IAAIE,SAAQC,aACXC,SAASC,cAAcJ,iBAChBE,QAAQC,SAASC,cAAcJ,iBAGpCK,SAAW,IAAIC,kBAAiB,KAC9BH,SAASC,cAAcJ,YACvBE,QAAQC,SAASC,cAAcJ,WAC/BK,SAASE,iBAIjBF,SAASG,QAAQL,SAASM,KAAM,CAC5BC,WAAW,EACXC,SAAS,QAvG0DC,MAAK,KAE5EC,iCAkBiCd,kBAwCHC,iBAC3B,IAAIC,SAAQC,cACVC,SAASC,cAAcJ,iBACjBE,QAAQC,SAASC,cAAcJ,iBAGpCK,SAAW,IAAIC,kBAAiB,KAC7BH,SAASC,cAAcJ,YACxBE,QAAQC,SAASC,cAAcJ,WAC/BK,SAASE,iBAIjBF,SAASG,QAAQL,SAASM,KAAM,CAC5BC,WAAW,EACXC,SAAS,QAtDjBG,CAA6B,gCAAkCf,OAAS,MAAMa,MAAK,KAC/EC,wBACAf,yBAAyBC,SAElB,KAERgB,OAAMC,QACLC,QAAQD,MAAMA,QACP,KAzBPE,CAAgCnB,SAEzB,KAERgB,OAAMC,QACLC,QAAQD,MAAMA,QACP,cA0BNH,wBACLV,SAASgB,iBAAiB,kCAAkCC,SAAQ,SAASC,SACzEC,2BAA2BD,QAAS,mBAEpCA,QAAQE,iBAAiB,UAAU,WAC/BD,2BAA2BD,QAAS,yBAI5ClB,SAASgB,iBAAiB,kCAAkCC,SAAQ,SAASC,SACzEG,0BAA0BH,SAE1BA,QAAQE,iBAAiB,UAAU,WAC/BC,0BAA0BH,wBAoE7BC,2BAA2BD,QAASI,cACrCC,YAAcC,SAASN,QAAQO,OAEnCzB,SAASgB,iBAAiB,SAAWM,SAAW,MAAML,SAAQ,SAASC,aAC/DQ,MAAQR,QAAQS,GAAGD,MAAM,IAAIE,OAAON,SAAW,eAC/CI,MAAO,KACHG,IAAML,SAASE,MAAM,IAErBR,QAAQY,MAAMC,QADdF,IAAMN,YACkB,OAEA,gBAW/BF,0BAA0BW,YAC3BC,SAAWD,OAAOL,GACtBM,SAAWT,SAASS,SAASC,QAAQ,yBAA0B,KAE/Df,2BAA2Ba,OAAQ,0BAA4BC,SAAW,KAC1Ed,2BAA2Ba,OAAQ,kCAAoCC,SAAW,mBArKlE,CAACrC,OAAQuC,aAEzBC,OAAOjB,2BAA6BA,2BACpCiB,OAAOf,0BAA4BA,0BAE/Bc,UAEAxC,yBAAyBC,QAGzBc"}